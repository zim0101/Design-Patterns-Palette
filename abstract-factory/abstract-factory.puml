@startuml Abstract Factory Pattern

skinparam classAttributeIconSize 0
skinparam backgroundColor white
skinparam roundcorner 5

interface AbstractFactory {
    + createProductA(): AbstractProductA
    + createProductB(): AbstractProductB
}

class ConcreteFactory1 {
    + createProductA(): ProductA1
    + createProductB(): ProductB1
}

class ConcreteFactory2 {
    + createProductA(): ProductA2
    + createProductB(): ProductB2
}

interface AbstractProductA {
}

interface AbstractProductB {
}

class ProductA1 {
}

class ProductA2 {
}

class ProductB1 {
}

class ProductB2 {
}

class Client {
}

AbstractFactory <|.. ConcreteFactory1
AbstractFactory <|.. ConcreteFactory2

AbstractProductA <|.. ProductA1
AbstractProductA <|.. ProductA2
AbstractProductB <|.. ProductB1
AbstractProductB <|.. ProductB2

ConcreteFactory1 ..> ProductA1: creates
ConcreteFactory1 ..> ProductB1: creates
ConcreteFactory2 ..> ProductA2: creates
ConcreteFactory2 ..> ProductB2: creates

Client --> AbstractFactory
Client --> AbstractProductA
Client --> AbstractProductB

note "Factory for creating\nrelated products" as N1
AbstractFactory .. N1

note "Products created by\nsame factory are compatible" as N2
ProductA1 .. N2
ProductB1 .. N2

@enduml
